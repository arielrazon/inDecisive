{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { createHTMLImage, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A comment can contain an image or avatar.\n */\n\nfunction CommentAvatar(props) {\n  var className = props.className,\n      src = props.src;\n  var classes = cx('avatar', className);\n  var rest = getUnhandledProps(CommentAvatar, props);\n  var ElementType = getElementType(CommentAvatar, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), createHTMLImage(src, {\n    autoGenerateKey: false\n  }));\n}\n\nCommentAvatar.handledProps = [\"as\", \"className\", \"src\"];\nCommentAvatar.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Specifies the URL of the image. */\n  src: PropTypes.string\n} : {};\nexport default CommentAvatar;","map":{"version":3,"sources":["/Users/arielrazon/Desktop/big_coding_projects/in_decisive/client/node_modules/semantic-ui-react/dist/es/views/Comment/CommentAvatar.js"],"names":["_extends","cx","PropTypes","React","createHTMLImage","customPropTypes","getElementType","getUnhandledProps","CommentAvatar","props","className","src","classes","rest","ElementType","createElement","autoGenerateKey","handledProps","propTypes","process","env","NODE_ENV","as","string"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,gCAArB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,EAA0BC,eAA1B,EAA2CC,cAA3C,EAA2DC,iBAA3D,QAAoF,WAApF;AACA;AACA;AACA;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,MAAIC,SAAS,GAAGD,KAAK,CAACC,SAAtB;AAAA,MACIC,GAAG,GAAGF,KAAK,CAACE,GADhB;AAEA,MAAIC,OAAO,GAAGX,EAAE,CAAC,QAAD,EAAWS,SAAX,CAAhB;AACA,MAAIG,IAAI,GAAGN,iBAAiB,CAACC,aAAD,EAAgBC,KAAhB,CAA5B;AACA,MAAIK,WAAW,GAAGR,cAAc,CAACE,aAAD,EAAgBC,KAAhB,CAAhC;AACA,SAAON,KAAK,CAACY,aAAN,CAAoBD,WAApB,EAAiCd,QAAQ,CAAC,EAAD,EAAKa,IAAL,EAAW;AACzDH,IAAAA,SAAS,EAAEE;AAD8C,GAAX,CAAzC,EAEHR,eAAe,CAACO,GAAD,EAAM;AACvBK,IAAAA,eAAe,EAAE;AADM,GAAN,CAFZ,CAAP;AAKD;;AAEDR,aAAa,CAACS,YAAd,GAA6B,CAAC,IAAD,EAAO,WAAP,EAAoB,KAApB,CAA7B;AACAT,aAAa,CAACU,SAAd,GAA0BC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AAChE;AACAC,EAAAA,EAAE,EAAEjB,eAAe,CAACiB,EAF4C;;AAIhE;AACAZ,EAAAA,SAAS,EAAER,SAAS,CAACqB,MAL2C;;AAOhE;AACAZ,EAAAA,GAAG,EAAET,SAAS,CAACqB;AARiD,CAAxC,GAStB,EATJ;AAUA,eAAef,aAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { createHTMLImage, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A comment can contain an image or avatar.\n */\n\nfunction CommentAvatar(props) {\n  var className = props.className,\n      src = props.src;\n  var classes = cx('avatar', className);\n  var rest = getUnhandledProps(CommentAvatar, props);\n  var ElementType = getElementType(CommentAvatar, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), createHTMLImage(src, {\n    autoGenerateKey: false\n  }));\n}\n\nCommentAvatar.handledProps = [\"as\", \"className\", \"src\"];\nCommentAvatar.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Specifies the URL of the image. */\n  src: PropTypes.string\n} : {};\nexport default CommentAvatar;"]},"metadata":{},"sourceType":"module"}