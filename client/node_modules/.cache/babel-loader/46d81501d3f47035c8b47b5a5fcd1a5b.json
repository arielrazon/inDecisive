{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _get from \"lodash/get\";\nimport _isNil from \"lodash/isNil\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { createElement } from 'react';\nimport { childrenUtils, createHTMLLabel, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useWidthProp } from '../../lib';\nimport Checkbox from '../../modules/Checkbox';\nimport Radio from '../../addons/Radio';\n/**\n * A field is a form element containing a label and an input.\n * @see Form\n * @see Button\n * @see Checkbox\n * @see Dropdown\n * @see Input\n * @see Radio\n * @see Select\n * @see Visibility\n */\n\nfunction FormField(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      control = props.control,\n      disabled = props.disabled,\n      error = props.error,\n      inline = props.inline,\n      label = props.label,\n      required = props.required,\n      type = props.type,\n      width = props.width;\n  var classes = cx(useKeyOnly(disabled, 'disabled'), useKeyOnly(error, 'error'), useKeyOnly(inline, 'inline'), useKeyOnly(required, 'required'), useWidthProp(width, 'wide'), 'field', className);\n  var rest = getUnhandledProps(FormField, props);\n  var ElementType = getElementType(FormField, props); // ----------------------------------------\n  // No Control\n  // ----------------------------------------\n\n  if (_isNil(control)) {\n    if (_isNil(label)) {\n      return React.createElement(ElementType, _extends({}, rest, {\n        className: classes\n      }), childrenUtils.isNil(children) ? content : children);\n    }\n\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), createHTMLLabel(label, {\n      autoGenerateKey: false\n    }));\n  } // ----------------------------------------\n  // Checkbox/Radio Control\n  // ----------------------------------------\n\n\n  var controlProps = _objectSpread({}, rest, {\n    content: content,\n    children: children,\n    disabled: disabled,\n    required: required,\n    type: type // wrap HTML checkboxes/radios in the label\n\n  });\n\n  if (control === 'input' && (type === 'checkbox' || type === 'radio')) {\n    return React.createElement(ElementType, {\n      className: classes\n    }, React.createElement(\"label\", null, createElement(control, controlProps), \" \", label));\n  } // pass label prop to controls that support it\n\n\n  if (control === Checkbox || control === Radio) {\n    return React.createElement(ElementType, {\n      className: classes\n    }, createElement(control, _objectSpread({}, controlProps, {\n      label: label\n    })));\n  } // ----------------------------------------\n  // Other Control\n  // ----------------------------------------\n\n\n  return React.createElement(ElementType, {\n    className: classes\n  }, createHTMLLabel(label, {\n    defaultProps: {\n      htmlFor: _get(controlProps, 'id')\n    },\n    autoGenerateKey: false\n  }), createElement(control, controlProps));\n}\n\nFormField.handledProps = [\"as\", \"children\", \"className\", \"content\", \"control\", \"disabled\", \"error\", \"inline\", \"label\", \"required\", \"type\", \"width\"];\nFormField.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /**\n   * A form control component (i.e. Dropdown) or HTML tagName (i.e. 'input').\n   * Extra FormField props are passed to the control component.\n   * Mutually exclusive with children.\n   */\n  control: customPropTypes.some([PropTypes.func, PropTypes.oneOf(['button', 'input', 'select', 'textarea'])]),\n\n  /** Individual fields may be disabled. */\n  disabled: PropTypes.bool,\n\n  /** Individual fields may display an error state. */\n  error: PropTypes.bool,\n\n  /** A field can have its label next to instead of above it. */\n  inline: PropTypes.bool,\n  // Heads Up!\n  // Do not disallow children with `label` shorthand\n  // The `control` might accept a `label` prop and `children`\n\n  /** Mutually exclusive with children. */\n  label: PropTypes.oneOfType([PropTypes.node, PropTypes.object]),\n\n  /** A field can show that input is mandatory. */\n  required: PropTypes.bool,\n\n  /** Passed to the control component (i.e. <input type='password' />) */\n  type: customPropTypes.every([customPropTypes.demand(['control'])]),\n\n  /** A field can specify its width in grid columns */\n  width: PropTypes.oneOf(SUI.WIDTHS)\n} : {};\nexport default FormField;","map":{"version":3,"sources":["/Users/arielrazon/Desktop/big_coding_projects/in_decisive/client/node_modules/semantic-ui-react/dist/es/collections/Form/FormField.js"],"names":["_objectSpread","_extends","_get","_isNil","cx","PropTypes","React","createElement","childrenUtils","createHTMLLabel","customPropTypes","getElementType","getUnhandledProps","SUI","useKeyOnly","useWidthProp","Checkbox","Radio","FormField","props","children","className","content","control","disabled","error","inline","label","required","type","width","classes","rest","ElementType","isNil","autoGenerateKey","controlProps","defaultProps","htmlFor","handledProps","propTypes","process","env","NODE_ENV","as","node","string","contentShorthand","some","func","oneOf","bool","oneOfType","object","every","demand","WIDTHS"],"mappings":"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","sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _get from \"lodash/get\";\nimport _isNil from \"lodash/isNil\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { createElement } from 'react';\nimport { childrenUtils, createHTMLLabel, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useWidthProp } from '../../lib';\nimport Checkbox from '../../modules/Checkbox';\nimport Radio from '../../addons/Radio';\n/**\n * A field is a form element containing a label and an input.\n * @see Form\n * @see Button\n * @see Checkbox\n * @see Dropdown\n * @see Input\n * @see Radio\n * @see Select\n * @see Visibility\n */\n\nfunction FormField(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      control = props.control,\n      disabled = props.disabled,\n      error = props.error,\n      inline = props.inline,\n      label = props.label,\n      required = props.required,\n      type = props.type,\n      width = props.width;\n  var classes = cx(useKeyOnly(disabled, 'disabled'), useKeyOnly(error, 'error'), useKeyOnly(inline, 'inline'), useKeyOnly(required, 'required'), useWidthProp(width, 'wide'), 'field', className);\n  var rest = getUnhandledProps(FormField, props);\n  var ElementType = getElementType(FormField, props); // ----------------------------------------\n  // No Control\n  // ----------------------------------------\n\n  if (_isNil(control)) {\n    if (_isNil(label)) {\n      return React.createElement(ElementType, _extends({}, rest, {\n        className: classes\n      }), childrenUtils.isNil(children) ? content : children);\n    }\n\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), createHTMLLabel(label, {\n      autoGenerateKey: false\n    }));\n  } // ----------------------------------------\n  // Checkbox/Radio Control\n  // ----------------------------------------\n\n\n  var controlProps = _objectSpread({}, rest, {\n    content: content,\n    children: children,\n    disabled: disabled,\n    required: required,\n    type: type // wrap HTML checkboxes/radios in the label\n\n  });\n\n  if (control === 'input' && (type === 'checkbox' || type === 'radio')) {\n    return React.createElement(ElementType, {\n      className: classes\n    }, React.createElement(\"label\", null, createElement(control, controlProps), \" \", label));\n  } // pass label prop to controls that support it\n\n\n  if (control === Checkbox || control === Radio) {\n    return React.createElement(ElementType, {\n      className: classes\n    }, createElement(control, _objectSpread({}, controlProps, {\n      label: label\n    })));\n  } // ----------------------------------------\n  // Other Control\n  // ----------------------------------------\n\n\n  return React.createElement(ElementType, {\n    className: classes\n  }, createHTMLLabel(label, {\n    defaultProps: {\n      htmlFor: _get(controlProps, 'id')\n    },\n    autoGenerateKey: false\n  }), createElement(control, controlProps));\n}\n\nFormField.handledProps = [\"as\", \"children\", \"className\", \"content\", \"control\", \"disabled\", \"error\", \"inline\", \"label\", \"required\", \"type\", \"width\"];\nFormField.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /**\n   * A form control component (i.e. Dropdown) or HTML tagName (i.e. 'input').\n   * Extra FormField props are passed to the control component.\n   * Mutually exclusive with children.\n   */\n  control: customPropTypes.some([PropTypes.func, PropTypes.oneOf(['button', 'input', 'select', 'textarea'])]),\n\n  /** Individual fields may be disabled. */\n  disabled: PropTypes.bool,\n\n  /** Individual fields may display an error state. */\n  error: PropTypes.bool,\n\n  /** A field can have its label next to instead of above it. */\n  inline: PropTypes.bool,\n  // Heads Up!\n  // Do not disallow children with `label` shorthand\n  // The `control` might accept a `label` prop and `children`\n\n  /** Mutually exclusive with children. */\n  label: PropTypes.oneOfType([PropTypes.node, PropTypes.object]),\n\n  /** A field can show that input is mandatory. */\n  required: PropTypes.bool,\n\n  /** Passed to the control component (i.e. <input type='password' />) */\n  type: customPropTypes.every([customPropTypes.demand(['control'])]),\n\n  /** A field can specify its width in grid columns */\n  width: PropTypes.oneOf(SUI.WIDTHS)\n} : {};\nexport default FormField;"]},"metadata":{},"sourceType":"module"}